<script lang="javascript" type="text/javascript">

    if (console.everything === undefined) {
        console.everything = [];
        console.callbacks = {
            debug: null,
            log: null,
            error: null,
            warn: null,
            trace: null,
        }

        console._STACK_FRAME_RE = /at ((.*)\s?)\(?https?:\/+[^/]+\/*(\/.+):(\d+):(\d+)/
        console._ERR_FILENAME = /https?:\/+[^/]+\/*(\/.+)/

        /**
         * takes whatever is fed to console.log() / .error() etc....
         * Checks following options:
         *  - if arguments contain an Error object: Error's stacktrace is used, message is generated from all arguments
         *  - if first argument is a stacktrace as a string
         *  - if arguments are just strings, then they're used as msg, stacktrace is generated
         * @returns obj
         * @private
         */
        console._logDataFromArgs = function(){
            try {
                let c = null

                // check if passed args contain an Error object which stack trace could be used
                let err = null
                for (let a of arguments) {
                    if (a instanceof Error) {
                        err = a
                        break
                    }
                }
                if (err) {
                    c = console._getCaller(Array.from(arguments), err)
                    return {
                        "level": null,
                        "msg": c.msg,
                        "ts": Date.now(),
                        "file": c ? c.file : null,
                        "function": c ? c.function : null,
                        "line": c ? c.line : null,
                        "col": c ? c.col : null,
                        "stacktrace": c ? c.stacktrace : null,
                    }
                }

                // check if passed args are a stacktrace string.
                c = console._getCaller(Array.from(arguments).join(' '))
                if (c) {
                    // message is a stacktrace
                    return {
                        "level": null,
                        "msg": c.msg,
                        "ts": Date.now(),
                        "file": c ? c.file : null,
                        "function": c ? c.function : null,
                        "line": c ? c.line : null,
                        "col": c ? c.col : null,
                        "stacktrace": c ? c.stacktrace : null,
                    }
                }

                // default case: join args as message and generate own stack trace
                let msg = Array.from(arguments).join(' ')
                c = console._getCaller()
                return {
                    "level": null,
                    "msg": msg,
                    "ts": Date.now(),
                    "file": c ? c.file : null,
                    "function": c ? c.function : null,
                    "line": c ? c.line : null,
                    "col": c ? c.col : null,
                    "stacktrace": c ? c.stacktrace : null,
                }
            } catch (e) {
                console.error("Error in console._logDataFromArgs()", e)
                return {
                    "level": null,
                    "msg": Array.from(arguments).join(' '),
                    "ts": Date.now(),
                    "file": null,
                    "function": null,
                    "line": null,
                    "col": null,
                    "stacktrace": null,
                }
            }
        }

        /**
         *
         * Arguments:
         * - 0 arguments: stacktrace and msg are generated
         * - 1 argument: argument is tested to be a string containing a stacktrace
         * - 2 arguments: 1st arg should be a message, 2nd should be a Error object with a stack attribute
         * @returns obj or null
         * @private
         */
        console._getCaller = function() {
            try {
                let stack = null
                let msg = ''
                switch (arguments.length) {
                    case 0:
                        // we need to create our own stack trace
                        stack = (new Error()).stack.split("\n");
                        msg = stack.shift().trim()
                        break
                    case 1:
                        // arg is a stacktrace-string
                        stack = arguments[0].split("\n")
                        msg = stack.shift().trim()
                        break
                    case 2:
                        // message and Error object passed
                        if (arguments[1] instanceof Error) {
                            stack = arguments[1].stack.split("\n")
                            msg = arguments[0] + ' ' + stack.shift().trim()
                            break
                        }
                    default:
                        // ?
                }
                let callerInfo = null
                let stacktrace = []
                let first = true
                for(let frame of stack) {
                    if (!frame.trim().startsWith('at console')) {
                        if (first) {
                            callerInfo = console._STACK_FRAME_RE.exec(frame);
                        }
                        stacktrace.push(frame.trim())
                        first = false
                    }
                }
                if (callerInfo) {
                    return {
                        function: callerInfo[1] || null,
                        file: callerInfo[2] || null,
                        line: callerInfo[3] || null,
                        col: callerInfo[4] || null,
                        msg: msg,
                        stacktrace: stacktrace,
                    };
                }
                return null;
            } catch (e) {
                return null;
            }
          }

        console.defaultLog = console.log.bind(console);
        console.log = function(){
            let data = console._logDataFromArgs.apply(null, arguments)
            data.level = "log"
            console.everything.push(data);
            console.defaultLog.apply(console, arguments);
            if (console.callbacks.log) {console.callbacks.log(data);}
        }
        console.defaultError = console.error.bind(console);
        console.error = function(){
            let data = console._logDataFromArgs.apply(null, arguments)
            data.level = "error"
            console.everything.push(data);
            console.defaultError.apply(console, arguments);
            if (console.callbacks.error) {console.callbacks.error(data);}
        }
        console.defaultWarn = console.warn.bind(console);
        console.warn = function(){
            let data = console._logDataFromArgs.apply(null, arguments)
            data.level = "warn"
            console.everything.push(data);
            console.defaultWarn.apply(console, arguments);
            if (console.callbacks.warn) {console.callbacks.warn(data);}
        }
        console.defaultDebug = console.debug.bind(console);
        console.debug = function(){
            let data = console._logDataFromArgs.apply(null, arguments)
            data.level = "debug"
            console.everything.push(data);
            console.defaultDebug.apply(console, arguments);
            if (console.callbacks.debug) {console.callbacks.debug(data);}
        }
        console.defaultTrace = console.trace.bind(console);
        console.trace = function(){
            let data = console._logDataFromArgs.apply(null, arguments)
            data.level = "trace"
            console.everything.push(data);
            console.defaultTrace.apply(console, arguments);
            if (console.callbacks.trace) {console.callbacks.trace(data);}
        }
    }

    window.addEventListener('error', function(event) {
        let m = console._ERR_FILENAME.exec(event.filename)
        let filename = m ? m[1] : null
        let data = {
            "level":"error",
            "msg": event.message,
            "file": filename,
            "function": "window.onerror",
            "line": event.lineno,
            "col": event.colno,
            "ts": Date.now()
        }
        console.everything.push(data);
        if (console.callbacks.error) {console.callbacks.error(data);}
        return false;
    })

</script>
